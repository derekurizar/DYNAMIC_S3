# This is an Action workflow for deploying Staging to S3

name: Web App Deploy Staging

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [staging]
  pull_request:
    branches: [staging]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test-jest:
    strategy:
      matrix:
        node-version: [14.x]

    name: Run Jest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup npmrc
        run: echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_TOKEN}}" > .npmrc

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm run test -s
        env:
          REACT_APP_TYPE: ${{ secrets.REACT_APP_TYPE }}
          REACT_APP_API_KEY: ${{ secrets.AWS_API_KEY_STAGING }}
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL_STAGING }}
          REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY_STAGING }}
          REACT_APP_AUTH0_JWKS_URL: ${{secrets.AUTH0_JWKS_URL_STAGING}}
          REACT_APP_TIMEZONE_API_KEY: ${{secrets.GOOGLE_TIMEZONE_API_KEY_STAGING}}

  test-cypress:
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        node-version: [14.x]

    name: Run Cypress
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup npmrc
        run: echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_TOKEN}}" > .npmrc

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          install: false
          start: npm start
          wait-on: http://localhost:3000
          wait-on-timeout: 120
          browser: chrome
        env:
          CYPRESS_CLIENT_USERNAME: ${{ secrets.CY_USERNAME_STAGING }}
          CYPRESS_CLIENT_PASSWORD: ${{ secrets.CY_PASSWORD_STAGING }}
          REACT_APP_TYPE: ${{ secrets.REACT_APP_TYPE }}
          REACT_APP_API_KEY: ${{ secrets.AWS_API_KEY_STAGING }}
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL_STAGING }}
          REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY_STAGING }}
          REACT_APP_AUTH0_JWKS_URL: ${{ secrets.AUTH0_JWKS_URL_STAGING }}
          REACT_APP_TIMEZONE_API_KEY:
            ${{ secrets.GOOGLE_TIMEZONE_API_KEY_STAGING }}
            # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-deploy:
    strategy:
      matrix:
        node-version: [14.x]

    needs: [test-jest]
    name: Build and Deploy Staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup npmrc
        run: echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_TOKEN}}" > .npmrc

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit == 'false' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          REACT_APP_TYPE: ${{ secrets.REACT_APP_TYPE }}
          REACT_APP_API_KEY: ${{ secrets.AWS_API_KEY_STAGING }}
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL_STAGING }}
          REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY_STAGING }}
          REACT_APP_TIMEZONE_API_KEY: ${{secrets.GOOGLE_TIMEZONE_API_KEY_STAGING}}
          REACT_APP_AUTH0_JWKS_URL: ${{secrets.AUTH0_JWKS_URL_STAGING}}
          REACT_APP_DD_APPLICATION_ID: ${{secrets.DD_APPLICATION_ID_STAGING}}
          REACT_APP_DD_CLIENT_TOKEN: ${{secrets.DD_CLIENT_TOKEN_STAGING}}
          REACT_APP_DD_SITE: ${{secrets.DD_SITE_STAGING}}
          REACT_APP_DD_SERVICE: ${{secrets.DD_SERVICE_STAGING}}
          REACT_APP_DD_ENV: ${{secrets.DD_ENV_STAGING}}
          REACT_APP_DD_SAMPLE_RATE: ${{secrets.DD_SAMPLE_RATE_STAGING}}
          REACT_APP_DD_TRACK_INTERACTIONS: ${{secrets.DD_TRACK_INTERACTIONS_STAGING}}
          REACT_APP_DD_DEFAULT_PRIVACY_LEVEL: ${{secrets.DD_DEFAULT_PRIVACY_LEVEL_STAGING}}
          REACT_APP_CWP_ACH_ENCRYPTION_KEY: ${{secrets.CWP_ACH_ENCRYPTION_KEY_STAGING}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ secrets.AWS_PRIMARY_REGION_STAGING }}

      - name: Deploy to S3
        if: github.event_name != 'pull_request'
        run: aws s3 sync ./build/ s3://${{ secrets.AWS_PRIMARY_S3_BUCKET_STAGING }} --delete\

      - name: Invalidate Cloudfront CDN
        if: github.event_name != 'pull_request'
        run: aws cloudfront create-invalidation --distribution-id=${{secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING}} --paths '/*'

      - name: Configure AWS Credentials for Secondary Region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ secrets.AWS_SECONDARY_REGION_STAGING }}

      - name: Deploy to Secondary S3
        if: github.event_name != 'pull_request'
        run: aws s3 sync ./build/ s3://${{ secrets.AWS_SECONDARY_S3_BUCKET_STAGING }} --delete\

      - name: Invalidate Secondary Cloudfront CDN
        if: github.event_name != 'pull_request'
        run: aws cloudfront create-invalidation --distribution-id=${{secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING}} --paths '/*'
